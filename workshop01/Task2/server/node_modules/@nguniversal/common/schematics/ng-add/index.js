var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/express-engine/schematics/ng-add/index", ["require", "exports", "@angular-devkit/core", "@angular-devkit/schematics", "@angular-devkit/schematics/tasks", "@schematics/angular/utility/ast-utils", "@schematics/angular/utility/change", "@schematics/angular/utility/dependencies", "@schematics/angular/utility/ng-ast-utils", "@schematics/angular/utility/workspace", "path", "typescript"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    const core_1 = require("@angular-devkit/core");
    const schematics_1 = require("@angular-devkit/schematics");
    const tasks_1 = require("@angular-devkit/schematics/tasks");
    const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
    const change_1 = require("@schematics/angular/utility/change");
    const dependencies_1 = require("@schematics/angular/utility/dependencies");
    const ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
    const workspace_1 = require("@schematics/angular/utility/workspace");
    const path_1 = require("path");
    const ts = require("typescript");
    function default_1(options) {
        return (host, context) => __awaiter(this, void 0, void 0, function* () {
            const workspace = yield workspace_1.getWorkspace(host);
            const project = workspace.projects.get(options.project);
            if (project.extensions.projectType !== 'application') {
                throw new schematics_1.SchematicsException(`Universal requires a project type of "application".`);
            }
            const clientBuildTarget = project.targets.get('build');
            if (!clientBuildTarget) {
                throw new schematics_1.SchematicsException(`Project target "build" not found.`);
            }
            if (!options.skipInstall) {
                context.addTask(new tasks_1.NodePackageInstallTask());
            }
            return schematics_1.chain([
                augmentAppModuleRule(project, clientBuildTarget, options),
                options.ssr ? addSSRRule(project, clientBuildTarget) : schematics_1.noop(),
                options.prerender ? addPreRenderRule() : schematics_1.noop(),
                addScriptsRule(options),
                updateWorkspaceRule(options),
            ]);
        });
    }
    exports.default = default_1;
    function addPreRenderRule() {
        return (host) => __awaiter(this, void 0, void 0, function* () {
            dependencies_1.addPackageJsonDependency(host, {
                name: '@nguniversal/builders',
                type: dependencies_1.NodeDependencyType.Dev,
                version: '~12.0.0',
            });
        });
    }
    function addSSRRule(project, buildTarget) {
        return (host) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            dependencies_1.addPackageJsonDependency(host, {
                type: dependencies_1.NodeDependencyType.Default,
                name: 'express',
                version: '^4.15.2',
            });
            dependencies_1.addPackageJsonDependency(host, {
                type: dependencies_1.NodeDependencyType.Dev,
                name: '@types/express',
                version: '^4.17.0',
            });
            const templateSource = schematics_1.apply(schematics_1.url('./files/src'), [
                schematics_1.applyTemplates({}),
                schematics_1.move((_a = project.sourceRoot) !== null && _a !== void 0 ? _a : '/src'),
            ]);
            const rootSource = schematics_1.apply(schematics_1.url('./files/root'), [
                schematics_1.applyTemplates({
                    tsConfigExtends: core_1.basename(core_1.normalize(buildTarget.options.tsConfig)),
                    relativePathToWorkspaceRoot: relativePathToWorkspaceRoot(project.root),
                }),
                schematics_1.move(project.root),
            ]);
            return schematics_1.chain([schematics_1.mergeWith(templateSource), schematics_1.mergeWith(rootSource)]);
        });
    }
    function addScriptsRule(options) {
        return (host) => __awaiter(this, void 0, void 0, function* () {
            const pkgPath = '/package.json';
            const buffer = host.read(pkgPath);
            if (!buffer) {
                throw new schematics_1.SchematicsException('Could not find package.json');
            }
            const pkg = JSON.parse(buffer.toString());
            if (options.prerender) {
                pkg.scripts = Object.assign(Object.assign({}, pkg.scripts), { 'prerender': `ng run ${options.project}:prerender` });
            }
            if (options.ssr) {
                pkg.scripts = Object.assign(Object.assign({}, pkg.scripts), { 'build:client-and-server': `ng build ${options.project} && ng run ${options.project}:server`, 'build:server': `ng run ${options.project}:server`, 'serve:ssr': `node dist/${options.project}/server/main.js` });
            }
            host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
        });
    }
    function updateWorkspaceRule(options) {
        return workspace_1.updateWorkspace((workspace) => {
            var _a, _b;
            const project = workspace.projects.get(options.project);
            if (options.ssr) {
                project.targets.add({
                    name: 'server',
                    builder: '@angular-devkit/build-angular:server',
                    options: {
                        outputPath: `dist/${options.project}/server`,
                        main: path_1.posix.join((_a = project.sourceRoot) !== null && _a !== void 0 ? _a : '', 'server.ts'),
                        tsConfig: path_1.posix.join(project.root, 'tsconfig.server.json'),
                        bundleDependencies: false,
                        optimization: false,
                    },
                });
                const buildTarget = project.targets.get('build');
                if ((_b = project.targets.get('build')) === null || _b === void 0 ? void 0 : _b.options) {
                    buildTarget.options.outputPath = `dist/${options.project}/browser`;
                }
            }
            if (options.prerender) {
                project.targets.add({
                    name: 'prerender',
                    builder: '@nguniversal/builders:static-generator',
                    defaultConfiguration: 'production',
                    options: {},
                    configurations: {
                        production: {
                            browserTarget: `${options.project}:build:production`,
                        },
                        development: {
                            browserTarget: `${options.project}:build:development`,
                        },
                    },
                });
            }
        });
    }
    function augmentAppModuleRule(project, buildTarget, options) {
        return (host) => {
            const bootstrapModuleRelativePath = ng_ast_utils_1.findBootstrapModulePath(host, buildTarget.options.main);
            const bootstrapModulePath = core_1.normalize(`/${project.sourceRoot}/${bootstrapModuleRelativePath}.ts`);
            // Add BrowserModule.withServerTransition()
            const browserModuleImport = findBrowserModuleImport(host, bootstrapModulePath);
            const transitionCall = `.withServerTransition({ appId: '${options.appId}' })`;
            const position = browserModuleImport.pos + browserModuleImport.getFullText().length;
            const transitionCallChange = new change_1.InsertChange(bootstrapModulePath, position, transitionCall);
            const transitionCallRecorder = host.beginUpdate(bootstrapModulePath);
            transitionCallRecorder.insertLeft(transitionCallChange.pos, transitionCallChange.toAdd);
            host.commitUpdate(transitionCallRecorder);
            // Add @nguniversal/common/clover
            let changes = ast_utils_1.addImportToModule(getSourceFile(host, bootstrapModulePath), bootstrapModulePath, 'RendererModule.forRoot()', '@nguniversal/common/clover');
            let recorder = host.beginUpdate(bootstrapModulePath);
            change_1.applyToUpdateRecorder(recorder, changes);
            host.commitUpdate(recorder);
            changes = ast_utils_1.addImportToModule(getSourceFile(host, bootstrapModulePath), bootstrapModulePath, 'TransferHttpCacheModule', '@nguniversal/common/clover');
            recorder = host.beginUpdate(bootstrapModulePath);
            change_1.applyToUpdateRecorder(recorder, changes);
            host.commitUpdate(recorder);
        };
    }
    function relativePathToWorkspaceRoot(projectRoot) {
        const normalizedPath = core_1.split(core_1.normalize(projectRoot || ''));
        if (normalizedPath.length === 0 || !normalizedPath[0]) {
            return '.';
        }
        else {
            return normalizedPath.map(() => '..').join('/');
        }
    }
    function findBrowserModuleImport(host, modulePath) {
        const source = getSourceFile(host, modulePath);
        const decoratorMetadata = ast_utils_1.getDecoratorMetadata(source, 'NgModule', '@angular/core')[0];
        const browserModuleNode = ast_utils_1.findNode(decoratorMetadata, ts.SyntaxKind.Identifier, 'BrowserModule');
        if (!browserModuleNode) {
            throw new schematics_1.SchematicsException(`Cannot find BrowserModule import in ${modulePath}`);
        }
        return browserModuleNode;
    }
    function getSourceFile(host, path) {
        const buffer = host.read(path);
        if (!buffer) {
            throw new schematics_1.SchematicsException(`Could not find ${path}.`);
        }
        const content = buffer.toString();
        const source = ts.createSourceFile(path, content, ts.ScriptTarget.Latest, true);
        return source;
    }
});
//# sourceMappingURL=data:application/json;base64,