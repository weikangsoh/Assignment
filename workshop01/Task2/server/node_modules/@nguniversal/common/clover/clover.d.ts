
import { ApplicationRef } from '@angular/core';
import { HttpEvent } from '@angular/common/http';
import { HttpHandler } from '@angular/common/http';
import { HttpInterceptor } from '@angular/common/http';
import { HttpRequest } from '@angular/common/http';
import { ModuleWithProviders } from '@angular/core';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { TransferState } from '@angular/platform-browser';
import { ɵSharedStylesHost } from '@angular/platform-browser';

export declare class RendererModule {
    private applicationRef;
    private transferState?;
    private appId?;
    constructor(applicationRef: ApplicationRef, transferState?: TransferState | undefined, appId?: string | undefined);
    static forRoot(): ModuleWithProviders<RendererModule>;
}


export declare class TransferHttpCacheModule {
}

export declare type ɵNGRenderMode = boolean | undefined | ɵNGRenderModeAPI;

export declare interface ɵNGRenderModeAPI {
    getSerializedState: () => string | undefined;
    getWhenStable: () => Promise<void>;
    appId?: string;
}

export declare class ɵnguniversal_modules_common_clover_clover_a extends ɵSharedStylesHost implements OnDestroy {
    private doc;
    private appId?;
    private head;
    private _styleNodes;
    private _styleNodesInDOM;
    constructor(doc: Document, appId?: string | undefined);
    private _addStyle;
    onStylesAdded(additions: Set<string>): void;
    addHost(_hostNode: Node): void;
    removeHost(_hostNode: Node): void;
    ngOnDestroy(): void;
}

export declare class ɵnguniversal_modules_common_clover_clover_b implements HttpInterceptor {
    private transferState;
    private isCacheActive;
    private makeCacheKey;
    constructor(appRef: ApplicationRef, transferState: TransferState);
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    private getHeaders;
}

export { }
