/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/common/clover/server/src/custom-resource-loader", ["require", "exports", "fs", "jsdom", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomResourceLoader = void 0;
    const fs_1 = require("fs");
    const jsdom_1 = require("jsdom");
    const path_1 = require("path");
    class CustomResourceLoader extends jsdom_1.ResourceLoader {
        constructor(baseUrl, publicPath, fileCache) {
            super();
            this.baseUrl = baseUrl;
            this.publicPath = publicPath;
            this.fileCache = fileCache;
        }
        fetch(url, _options) {
            if (!url.endsWith('.js') || !url.startsWith(this.baseUrl)) {
                return null;
            }
            const path = path_1.normalize(url.replace(this.baseUrl, this.publicPath));
            if (this.fileCache.has(path)) {
                // tslint:disable-next-line: no-non-null-assertion
                const filePromise = Promise.resolve(this.fileCache.get(path));
                filePromise.abort = () => undefined;
                return filePromise;
            }
            const promise = fs_1.promises.readFile(path).then((content) => {
                this.fileCache.set(path, content);
                return content;
            });
            promise.abort = () => undefined;
            return promise;
        }
    }
    exports.CustomResourceLoader = CustomResourceLoader;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXJlc291cmNlLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvY29tbW9uL2Nsb3Zlci9zZXJ2ZXIvc3JjL2N1c3RvbS1yZXNvdXJjZS1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7Ozs7O0lBRUgsMkJBQThCO0lBQzlCLGlDQUF1RTtJQUN2RSwrQkFBaUM7SUFFakMsTUFBYSxvQkFBcUIsU0FBUSxzQkFBYztRQUN0RCxZQUNtQixPQUFlLEVBQ2YsVUFBa0IsRUFDbEIsU0FBOEI7WUFFL0MsS0FBSyxFQUFFLENBQUM7WUFKUyxZQUFPLEdBQVAsT0FBTyxDQUFRO1lBQ2YsZUFBVSxHQUFWLFVBQVUsQ0FBUTtZQUNsQixjQUFTLEdBQVQsU0FBUyxDQUFxQjtRQUdqRCxDQUFDO1FBRUQsS0FBSyxDQUFDLEdBQVcsRUFBRSxRQUFzQjtZQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUN6RCxPQUFPLElBQUksQ0FBQzthQUNiO1lBRUQsTUFBTSxJQUFJLEdBQUcsZ0JBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDbkUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDNUIsa0RBQWtEO2dCQUNsRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBRSxDQUE2QixDQUFDO2dCQUMzRixXQUFXLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQztnQkFFcEMsT0FBTyxXQUFXLENBQUM7YUFDcEI7WUFFRCxNQUFNLE9BQU8sR0FBRyxhQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUN2RCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBRWxDLE9BQU8sT0FBTyxDQUFDO1lBQ2pCLENBQUMsQ0FBNkIsQ0FBQztZQUUvQixPQUFPLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUVoQyxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDO0tBQ0Y7SUFqQ0Qsb0RBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IHByb21pc2VzIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgQWJvcnRhYmxlUHJvbWlzZSwgRmV0Y2hPcHRpb25zLCBSZXNvdXJjZUxvYWRlciB9IGZyb20gJ2pzZG9tJztcbmltcG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgY2xhc3MgQ3VzdG9tUmVzb3VyY2VMb2FkZXIgZXh0ZW5kcyBSZXNvdXJjZUxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmFzZVVybDogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHVibGljUGF0aDogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZmlsZUNhY2hlOiBNYXA8c3RyaW5nLCBCdWZmZXI+LFxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZmV0Y2godXJsOiBzdHJpbmcsIF9vcHRpb25zOiBGZXRjaE9wdGlvbnMpOiBBYm9ydGFibGVQcm9taXNlPEJ1ZmZlcj4gfCBudWxsIHtcbiAgICBpZiAoIXVybC5lbmRzV2l0aCgnLmpzJykgfHwgIXVybC5zdGFydHNXaXRoKHRoaXMuYmFzZVVybCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHBhdGggPSBub3JtYWxpemUodXJsLnJlcGxhY2UodGhpcy5iYXNlVXJsLCB0aGlzLnB1YmxpY1BhdGgpKTtcbiAgICBpZiAodGhpcy5maWxlQ2FjaGUuaGFzKHBhdGgpKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgY29uc3QgZmlsZVByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodGhpcy5maWxlQ2FjaGUuZ2V0KHBhdGgpISkgYXMgQWJvcnRhYmxlUHJvbWlzZTxCdWZmZXI+O1xuICAgICAgZmlsZVByb21pc2UuYWJvcnQgPSAoKSA9PiB1bmRlZmluZWQ7XG5cbiAgICAgIHJldHVybiBmaWxlUHJvbWlzZTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9taXNlID0gcHJvbWlzZXMucmVhZEZpbGUocGF0aCkudGhlbigoY29udGVudCkgPT4ge1xuICAgICAgdGhpcy5maWxlQ2FjaGUuc2V0KHBhdGgsIGNvbnRlbnQpO1xuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KSBhcyBBYm9ydGFibGVQcm9taXNlPEJ1ZmZlcj47XG5cbiAgICBwcm9taXNlLmFib3J0ID0gKCkgPT4gdW5kZWZpbmVkO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbn1cbiJdfQ==