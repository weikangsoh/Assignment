/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/common/clover/server/src/server-engine", ["require", "exports", "tslib", "fs", "jsdom", "path", "url", "@nguniversal/common/clover/server/src/custom-resource-loader", "@nguniversal/common/clover/server/src/inline-css-processor"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Engine = void 0;
    const tslib_1 = require("tslib");
    const fs = tslib_1.__importStar(require("fs"));
    const jsdom_1 = require("jsdom");
    const path = tslib_1.__importStar(require("path"));
    const url_1 = require("url");
    const custom_resource_loader_1 = require("@nguniversal/common/clover/server/src/custom-resource-loader");
    const inline_css_processor_1 = require("@nguniversal/common/clover/server/src/inline-css-processor");
    class Engine {
        constructor() {
            this.fileExistsCache = new Map();
            this.htmlFileCache = new Map();
            this.resourceLoaderCache = new Map();
            this.inlineCriticalCssProcessor = new inline_css_processor_1.InlineCriticalCssProcessor({ minify: true }, this.resourceLoaderCache);
        }
        render(options) {
            var _a, _b, _c, _d, _e;
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const { pathname, origin } = new url_1.URL(options.url);
                const prerenderedSnapshot = yield this.getPrerenderedSnapshot(options.publicPath, pathname);
                if (prerenderedSnapshot) {
                    return prerenderedSnapshot;
                }
                let htmlContent = yield this.getHtmlTemplate(options.publicPath, pathname, options.htmlFilename);
                const inlineCriticalCss = options.inlineCriticalCss !== false;
                const customResourceLoader = new custom_resource_loader_1.CustomResourceLoader(origin, options.publicPath, this.resourceLoaderCache);
                let dom;
                if (inlineCriticalCss) {
                    // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64
                    htmlContent = htmlContent.replace(/ media=\"print\" onload=\"this\.media='all'"><noscript><link .+?><\/noscript>/g, '>');
                }
                try {
                    dom = new jsdom_1.JSDOM(htmlContent, {
                        runScripts: 'dangerously',
                        resources: customResourceLoader,
                        url: options.url,
                        referrer: (_a = options.headers) === null || _a === void 0 ? void 0 : _a.referrer,
                        userAgent: (_b = options.headers) === null || _b === void 0 ? void 0 : _b['user-agent'],
                        beforeParse: (window) => {
                            window.ngRenderMode = true;
                        },
                    });
                    const doc = dom.window.document;
                    // 60s timeout.
                    const stablizationTimeout = setTimeout(() => {
                        throw new Error('Angular application failed to stablize after in time.');
                    }, 60000);
                    // tslint:disable-next-line: no-shadowed-variable
                    const ngRenderMode = yield new Promise((resolve) => {
                        const interval = setInterval(() => {
                            const ngDOMMode = dom === null || dom === void 0 ? void 0 : dom.window.ngRenderMode;
                            if (ngDOMMode && typeof ngDOMMode === 'object') {
                                // Poll until ngDOMMode is an object.
                                clearTimeout(stablizationTimeout);
                                clearInterval(interval);
                                resolve(ngDOMMode);
                            }
                        }, 30);
                    });
                    yield ngRenderMode.getWhenStable();
                    (_c = doc.querySelector('[ng-version]')) === null || _c === void 0 ? void 0 : _c.setAttribute('ng-clover', '');
                    // Add Angular state
                    const state = ngRenderMode.getSerializedState();
                    if (state) {
                        const script = doc.createElement('script');
                        script.id = `${ngRenderMode.appId}-state`;
                        script.setAttribute('type', 'application/json');
                        script.textContent = state;
                        doc.body.appendChild(script);
                    }
                    const content = dom.serialize();
                    if (!options.inlineCriticalCss) {
                        return content;
                    }
                    const baseHref = (_e = (_d = doc.querySelector('base[href]')) === null || _d === void 0 ? void 0 : _d.getAttribute('href')) !== null && _e !== void 0 ? _e : '';
                    const { content: contentWithInlineCSS, warnings, errors, } = yield this.inlineCriticalCssProcessor.process(content, {
                        outputPath: path.join(options.publicPath, baseHref),
                    });
                    // tslint:disable-next-line: no-console
                    warnings === null || warnings === void 0 ? void 0 : warnings.forEach((m) => console.warn(m));
                    // tslint:disable-next-line: no-console
                    errors === null || errors === void 0 ? void 0 : errors.forEach((m) => console.error(m));
                    return contentWithInlineCSS;
                }
                finally {
                    dom === null || dom === void 0 ? void 0 : dom.window.close();
                }
            });
        }
        getPrerenderedSnapshot(publicPath, pathname) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // Remove leading forward slash.
                const pagePath = path.resolve(publicPath, pathname.substring(1), 'index.html');
                const content = yield this.readHTMLFile(pagePath);
                return (content === null || content === void 0 ? void 0 : content.includes('ng-version='))
                    ? content // Page is pre-rendered
                    : undefined;
            });
        }
        getHtmlTemplate(publicPath, pathname, htmlFilename = 'index.html') {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const files = [path.join(publicPath, htmlFilename)];
                const potentialLocalePath = pathname.split('/', 2)[1]; // potential base href
                if (potentialLocalePath) {
                    files.push(path.join(publicPath, potentialLocalePath, htmlFilename));
                }
                for (const file of files) {
                    const content = yield this.readHTMLFile(file);
                    if (content) {
                        return content;
                    }
                }
                throw new Error(`Cannot file HTML file. Looked in: ${files.join(', ')}`);
            });
        }
        fileExists(filePath) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const fileExists = this.fileExistsCache.get(filePath);
                if (fileExists === undefined) {
                    try {
                        yield fs.promises.access(filePath, fs.constants.F_OK);
                        this.fileExistsCache.set(filePath, true);
                        return true;
                    }
                    catch (_a) {
                        this.fileExistsCache.set(filePath, false);
                        return false;
                    }
                }
                return fileExists;
            });
        }
        readHTMLFile(filePath) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (this.htmlFileCache.has(filePath)) {
                    return this.htmlFileCache.get(filePath);
                }
                if (yield this.fileExists(filePath)) {
                    const content = yield fs.promises.readFile(filePath, 'utf-8');
                    this.htmlFileCache.set(filePath, content);
                    return content;
                }
                return undefined;
            });
        }
    }
    exports.Engine = Engine;
});
//# sourceMappingURL=data:application/json;base64,