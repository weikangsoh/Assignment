/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/common/clover/server/src/inline-css-processor", ["require", "exports", "tslib", "critters", "fs"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InlineCriticalCssProcessor = void 0;
    const tslib_1 = require("tslib");
    const critters_1 = tslib_1.__importDefault(require("critters"));
    const fs_1 = require("fs");
    class CrittersExtended extends critters_1.default {
        constructor(optionsExtended, resourceCache) {
            super({
                logger: {
                    warn: (s) => this.warnings.push(s),
                    error: (s) => this.errors.push(s),
                    info: () => { },
                },
                logLevel: 'warn',
                path: optionsExtended.outputPath,
                publicPath: optionsExtended.deployUrl,
                compress: !!optionsExtended.minify,
                pruneSource: false,
                reduceInlineStyles: false,
                mergeStylesheets: false,
                preload: 'media',
                noscriptFallback: true,
                inlineFonts: true,
            });
            this.optionsExtended = optionsExtended;
            this.resourceCache = resourceCache;
            this.warnings = [];
            this.errors = [];
        }
        readFile(path) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                let resourceContent = this.resourceCache.get(path);
                if (resourceContent === undefined) {
                    resourceContent = yield fs_1.promises.readFile(path);
                    this.resourceCache.set(path, resourceContent);
                }
                return resourceContent.toString();
            });
        }
    }
    class InlineCriticalCssProcessor {
        constructor(options, resourceCache) {
            this.options = options;
            this.resourceCache = resourceCache;
        }
        process(html, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const critters = new CrittersExtended(Object.assign(Object.assign({}, this.options), options), this.resourceCache);
                const content = yield critters.process(html);
                return {
                    content,
                    errors: critters.errors.length ? critters.errors : undefined,
                    warnings: critters.warnings.length ? critters.warnings : undefined,
                };
            });
        }
    }
    exports.InlineCriticalCssProcessor = InlineCriticalCssProcessor;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLWNzcy1wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2NvbW1vbi9jbG92ZXIvc2VydmVyL3NyYy9pbmxpbmUtY3NzLXByb2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7Ozs7O0lBRUgsZ0VBQWdDO0lBQ2hDLDJCQUE4QjtJQWlCOUIsTUFBTSxnQkFBaUIsU0FBUSxrQkFBUTtRQUlyQyxZQUNtQixlQUNnQixFQUNoQixhQUFrQztZQUVuRCxLQUFLLENBQUM7Z0JBQ0osTUFBTSxFQUFFO29CQUNOLElBQUksRUFBRSxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUMxQyxLQUFLLEVBQUUsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDekMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7aUJBQ2Y7Z0JBQ0QsUUFBUSxFQUFFLE1BQU07Z0JBQ2hCLElBQUksRUFBRSxlQUFlLENBQUMsVUFBVTtnQkFDaEMsVUFBVSxFQUFFLGVBQWUsQ0FBQyxTQUFTO2dCQUNyQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxNQUFNO2dCQUNsQyxXQUFXLEVBQUUsS0FBSztnQkFDbEIsa0JBQWtCLEVBQUUsS0FBSztnQkFDekIsZ0JBQWdCLEVBQUUsS0FBSztnQkFDdkIsT0FBTyxFQUFFLE9BQU87Z0JBQ2hCLGdCQUFnQixFQUFFLElBQUk7Z0JBQ3RCLFdBQVcsRUFBRSxJQUFJO2FBQ2xCLENBQUMsQ0FBQztZQXBCYyxvQkFBZSxHQUFmLGVBQWUsQ0FDQztZQUNoQixrQkFBYSxHQUFiLGFBQWEsQ0FBcUI7WUFONUMsYUFBUSxHQUFhLEVBQUUsQ0FBQztZQUN4QixXQUFNLEdBQWEsRUFBRSxDQUFDO1FBd0IvQixDQUFDO1FBRWUsUUFBUSxDQUFDLElBQVk7O2dCQUNuQyxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxlQUFlLEtBQUssU0FBUyxFQUFFO29CQUNqQyxlQUFlLEdBQUcsTUFBTSxhQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNoRCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7aUJBQy9DO2dCQUVELE9BQU8sZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3BDLENBQUM7U0FBQTtLQUNGO0lBRUQsTUFBYSwwQkFBMEI7UUFDckMsWUFDcUIsT0FBMEMsRUFDNUMsYUFBa0M7WUFEaEMsWUFBTyxHQUFQLE9BQU8sQ0FBbUM7WUFDNUMsa0JBQWEsR0FBYixhQUFhLENBQXFCO1FBQ2xELENBQUM7UUFFRSxPQUFPLENBQ1gsSUFBWSxFQUNaLE9BQXdDOztnQkFFeEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsaUNBQU0sSUFBSSxDQUFDLE9BQU8sR0FBSyxPQUFPLEdBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUMzRixNQUFNLE9BQU8sR0FBRyxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRTdDLE9BQU87b0JBQ0wsT0FBTztvQkFDUCxNQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVM7b0JBQzVELFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUztpQkFDbkUsQ0FBQztZQUNKLENBQUM7U0FBQTtLQUNGO0lBbkJELGdFQW1CQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgQ3JpdHRlcnMgZnJvbSAnY3JpdHRlcnMnO1xuaW1wb3J0IHsgcHJvbWlzZXMgfSBmcm9tICdmcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzT3B0aW9ucyB7XG4gIG91dHB1dFBhdGg/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3JPcHRpb25zIHtcbiAgbWluaWZ5PzogYm9vbGVhbjtcbiAgZGVwbG95VXJsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElubGluZUNyaXRpY2FsQ3NzUmVzdWx0IHtcbiAgY29udGVudDogc3RyaW5nO1xuICB3YXJuaW5ncz86IHN0cmluZ1tdO1xuICBlcnJvcnM/OiBzdHJpbmdbXTtcbn1cblxuY2xhc3MgQ3JpdHRlcnNFeHRlbmRlZCBleHRlbmRzIENyaXR0ZXJzIHtcbiAgcmVhZG9ubHkgd2FybmluZ3M6IHN0cmluZ1tdID0gW107XG4gIHJlYWRvbmx5IGVycm9yczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnNFeHRlbmRlZDogSW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3JPcHRpb25zICZcbiAgICAgIElubGluZUNyaXRpY2FsQ3NzUHJvY2Vzc09wdGlvbnMsXG4gICAgcHJpdmF0ZSByZWFkb25seSByZXNvdXJjZUNhY2hlOiBNYXA8c3RyaW5nLCBCdWZmZXI+LFxuICApIHtcbiAgICBzdXBlcih7XG4gICAgICBsb2dnZXI6IHtcbiAgICAgICAgd2FybjogKHM6IHN0cmluZykgPT4gdGhpcy53YXJuaW5ncy5wdXNoKHMpLFxuICAgICAgICBlcnJvcjogKHM6IHN0cmluZykgPT4gdGhpcy5lcnJvcnMucHVzaChzKSxcbiAgICAgICAgaW5mbzogKCkgPT4ge30sXG4gICAgICB9LFxuICAgICAgbG9nTGV2ZWw6ICd3YXJuJyxcbiAgICAgIHBhdGg6IG9wdGlvbnNFeHRlbmRlZC5vdXRwdXRQYXRoLFxuICAgICAgcHVibGljUGF0aDogb3B0aW9uc0V4dGVuZGVkLmRlcGxveVVybCxcbiAgICAgIGNvbXByZXNzOiAhIW9wdGlvbnNFeHRlbmRlZC5taW5pZnksXG4gICAgICBwcnVuZVNvdXJjZTogZmFsc2UsXG4gICAgICByZWR1Y2VJbmxpbmVTdHlsZXM6IGZhbHNlLFxuICAgICAgbWVyZ2VTdHlsZXNoZWV0czogZmFsc2UsXG4gICAgICBwcmVsb2FkOiAnbWVkaWEnLFxuICAgICAgbm9zY3JpcHRGYWxsYmFjazogdHJ1ZSxcbiAgICAgIGlubGluZUZvbnRzOiB0cnVlLFxuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIHJlYWRGaWxlKHBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgbGV0IHJlc291cmNlQ29udGVudCA9IHRoaXMucmVzb3VyY2VDYWNoZS5nZXQocGF0aCk7XG4gICAgaWYgKHJlc291cmNlQ29udGVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXNvdXJjZUNvbnRlbnQgPSBhd2FpdCBwcm9taXNlcy5yZWFkRmlsZShwYXRoKTtcbiAgICAgIHRoaXMucmVzb3VyY2VDYWNoZS5zZXQocGF0aCwgcmVzb3VyY2VDb250ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzb3VyY2VDb250ZW50LnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIElubGluZUNyaXRpY2FsQ3NzUHJvY2Vzc29yIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG9wdGlvbnM6IElubGluZUNyaXRpY2FsQ3NzUHJvY2Vzc29yT3B0aW9ucyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlc291cmNlQ2FjaGU6IE1hcDxzdHJpbmcsIEJ1ZmZlcj4sXG4gICkge31cblxuICBhc3luYyBwcm9jZXNzKFxuICAgIGh0bWw6IHN0cmluZyxcbiAgICBvcHRpb25zOiBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NPcHRpb25zLFxuICApOiBQcm9taXNlPElubGluZUNyaXRpY2FsQ3NzUmVzdWx0PiB7XG4gICAgY29uc3QgY3JpdHRlcnMgPSBuZXcgQ3JpdHRlcnNFeHRlbmRlZCh7IC4uLnRoaXMub3B0aW9ucywgLi4ub3B0aW9ucyB9LCB0aGlzLnJlc291cmNlQ2FjaGUpO1xuICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBjcml0dGVycy5wcm9jZXNzKGh0bWwpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQsXG4gICAgICBlcnJvcnM6IGNyaXR0ZXJzLmVycm9ycy5sZW5ndGggPyBjcml0dGVycy5lcnJvcnMgOiB1bmRlZmluZWQsXG4gICAgICB3YXJuaW5nczogY3JpdHRlcnMud2FybmluZ3MubGVuZ3RoID8gY3JpdHRlcnMud2FybmluZ3MgOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgfVxufVxuIl19