/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DOCUMENT, ɵgetDOM as getDOM } from '@angular/common';
import { APP_ID, Inject, Injectable, Optional } from '@angular/core';
import { ɵSharedStylesHost as SharedStylesHost } from '@angular/platform-browser';
export class SSRStylesHost extends SharedStylesHost {
    constructor(doc, appId) {
        var _a;
        super();
        this.doc = doc;
        this.appId = appId;
        this._styleNodes = new Set();
        this.head = this.doc.querySelector('head');
        const styles = (_a = this.head) === null || _a === void 0 ? void 0 : _a.querySelectorAll(`style[ng-style='${this.appId}']`);
        if (styles === null || styles === void 0 ? void 0 : styles.length) {
            const items = Array.from(styles);
            this._styleNodesInDOM = new Map(items.map((el) => [el.textContent, el]));
        }
    }
    _addStyle(style) {
        var _a, _b;
        const element = (_a = this._styleNodesInDOM) === null || _a === void 0 ? void 0 : _a.get(style);
        if (element) {
            if (typeof ngDevMode !== undefined && ngDevMode) {
                element.setAttribute('_ng-style-re-used', '');
            }
            (_b = this._styleNodesInDOM) === null || _b === void 0 ? void 0 : _b.delete(style);
            this._styleNodes.add(element);
            return;
        }
        const el = getDOM().createElement('style');
        el.textContent = style;
        if (this.appId) {
            el.setAttribute('ng-style', this.appId);
        }
        if (this.head) {
            this.head.appendChild(el);
        }
        this._styleNodes.add(el);
    }
    onStylesAdded(additions) {
        additions.forEach((style) => this._addStyle(style));
    }
    addHost(_hostNode) {
        // stub
    }
    removeHost(_hostNode) {
        // stub
    }
    ngOnDestroy() {
        this._styleNodes.forEach((styleNode) => styleNode.remove());
    }
}
SSRStylesHost.decorators = [
    { type: Injectable }
];
SSRStylesHost.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [APP_ID,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzX2hvc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2NvbW1vbi9jbG92ZXIvc3JjL3N0eWxlc19ob3N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBYSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLGlCQUFpQixJQUFJLGdCQUFnQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFLbEYsTUFBTSxPQUFPLGFBQWMsU0FBUSxnQkFBZ0I7SUFLakQsWUFDNEIsR0FBYSxFQUNILEtBQWM7O1FBRWxELEtBQUssRUFBRSxDQUFDO1FBSGtCLFFBQUcsR0FBSCxHQUFHLENBQVU7UUFDSCxVQUFLLEdBQUwsS0FBSyxDQUFTO1FBTDVDLGdCQUFXLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztRQVEzQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLE1BQU0sTUFBTSxHQUFHLE1BQUEsSUFBSSxDQUFDLElBQUksMENBQUUsZ0JBQWdCLENBQUMsbUJBQW1CLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO1FBQzlFLElBQUksTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLE1BQU0sRUFBRTtZQUNsQixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBa0IsQ0FBQztZQUNsRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMxRTtJQUNILENBQUM7SUFFTyxTQUFTLENBQUMsS0FBYTs7UUFDN0IsTUFBTSxPQUFPLEdBQUcsTUFBQSxJQUFJLENBQUMsZ0JBQWdCLDBDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRCxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksT0FBTyxTQUFTLEtBQUssU0FBUyxJQUFJLFNBQVMsRUFBRTtnQkFDL0MsT0FBTyxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUMvQztZQUVELE1BQUEsSUFBSSxDQUFDLGdCQUFnQiwwQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFOUIsT0FBTztTQUNSO1FBRUQsTUFBTSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNDLEVBQUUsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBRXZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzNCO1FBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELGFBQWEsQ0FBQyxTQUFzQjtRQUNsQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELE9BQU8sQ0FBQyxTQUFlO1FBQ3JCLE9BQU87SUFDVCxDQUFDO0lBRUQsVUFBVSxDQUFDLFNBQWU7UUFDeEIsT0FBTztJQUNULENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzlELENBQUM7OztZQTVERixVQUFVOzs7WUFPd0IsUUFBUSx1QkFBdEMsTUFBTSxTQUFDLFFBQVE7eUNBQ2YsUUFBUSxZQUFJLE1BQU0sU0FBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IERPQ1VNRU5ULCDJtWdldERPTSBhcyBnZXRET00gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQVBQX0lELCBJbmplY3QsIEluamVjdGFibGUsIE9uRGVzdHJveSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IMm1U2hhcmVkU3R5bGVzSG9zdCBhcyBTaGFyZWRTdHlsZXNIb3N0IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmRlY2xhcmUgbGV0IG5nRGV2TW9kZTogYm9vbGVhbiB8IHt9IHwgdW5kZWZpbmVkO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU1NSU3R5bGVzSG9zdCBleHRlbmRzIFNoYXJlZFN0eWxlc0hvc3QgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIGhlYWQ6IEhUTUxIZWFkRWxlbWVudCB8IG51bGw7XG4gIHByaXZhdGUgX3N0eWxlTm9kZXMgPSBuZXcgU2V0PEhUTUxFbGVtZW50PigpO1xuICBwcml2YXRlIF9zdHlsZU5vZGVzSW5ET006IE1hcDxzdHJpbmcgfCBudWxsLCBIVE1MRWxlbWVudD4gfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2M6IERvY3VtZW50LFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoQVBQX0lEKSBwcml2YXRlIGFwcElkPzogc3RyaW5nLFxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaGVhZCA9IHRoaXMuZG9jLnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbiAgICBjb25zdCBzdHlsZXMgPSB0aGlzLmhlYWQ/LnF1ZXJ5U2VsZWN0b3JBbGwoYHN0eWxlW25nLXN0eWxlPScke3RoaXMuYXBwSWR9J11gKTtcbiAgICBpZiAoc3R5bGVzPy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGl0ZW1zID0gQXJyYXkuZnJvbShzdHlsZXMpIGFzIEhUTUxFbGVtZW50W107XG4gICAgICB0aGlzLl9zdHlsZU5vZGVzSW5ET00gPSBuZXcgTWFwKGl0ZW1zLm1hcCgoZWwpID0+IFtlbC50ZXh0Q29udGVudCwgZWxdKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfYWRkU3R5bGUoc3R5bGU6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9zdHlsZU5vZGVzSW5ET00/LmdldChzdHlsZSk7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgbmdEZXZNb2RlICE9PSB1bmRlZmluZWQgJiYgbmdEZXZNb2RlKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdfbmctc3R5bGUtcmUtdXNlZCcsICcnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3R5bGVOb2Rlc0luRE9NPy5kZWxldGUoc3R5bGUpO1xuICAgICAgdGhpcy5fc3R5bGVOb2Rlcy5hZGQoZWxlbWVudCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbCA9IGdldERPTSgpLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgZWwudGV4dENvbnRlbnQgPSBzdHlsZTtcblxuICAgIGlmICh0aGlzLmFwcElkKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ25nLXN0eWxlJywgdGhpcy5hcHBJZCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGVhZCkge1xuICAgICAgdGhpcy5oZWFkLmFwcGVuZENoaWxkKGVsKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdHlsZU5vZGVzLmFkZChlbCk7XG4gIH1cblxuICBvblN0eWxlc0FkZGVkKGFkZGl0aW9uczogU2V0PHN0cmluZz4pIHtcbiAgICBhZGRpdGlvbnMuZm9yRWFjaCgoc3R5bGUpID0+IHRoaXMuX2FkZFN0eWxlKHN0eWxlKSk7XG4gIH1cblxuICBhZGRIb3N0KF9ob3N0Tm9kZTogTm9kZSk6IHZvaWQge1xuICAgIC8vIHN0dWJcbiAgfVxuXG4gIHJlbW92ZUhvc3QoX2hvc3ROb2RlOiBOb2RlKTogdm9pZCB7XG4gICAgLy8gc3R1YlxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fc3R5bGVOb2Rlcy5mb3JFYWNoKChzdHlsZU5vZGUpID0+IHN0eWxlTm9kZS5yZW1vdmUoKSk7XG4gIH1cbn1cbiJdfQ==