/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DOCUMENT, ɵPLATFORM_SERVER_ID as PLATFORM_SERVER_ID } from '@angular/common';
import { APP_ID, ApplicationRef, Inject, NgModule, Optional, PLATFORM_ID, } from '@angular/core';
import { BrowserModule, TransferState, ɵDomSharedStylesHost as DomSharedStylesHost, ɵSharedStylesHost as SharedStylesHost, ɵescapeHtml as escapeHtml, } from '@angular/platform-browser';
import { filter, mapTo, take } from 'rxjs/operators';
import { SSRStylesHost } from './styles_host';
export class RendererModule {
    constructor(applicationRef, transferState, appId) {
        this.applicationRef = applicationRef;
        this.transferState = transferState;
        this.appId = appId;
        if (typeof ngRenderMode !== 'undefined' && ngRenderMode) {
            ngRenderMode = {
                getSerializedState: () => this.transferState ? escapeHtml(this.transferState.toJson()) : undefined,
                appId: this.appId,
                getWhenStable: () => this.applicationRef.isStable
                    .pipe(filter((isStable) => isStable), take(1), mapTo(undefined))
                    .toPromise(),
            };
        }
    }
    static forRoot() {
        return {
            ngModule: RendererModule,
            providers: [
                ...(typeof ngRenderMode !== 'undefined' && ngRenderMode
                    ? [
                        { provide: PLATFORM_ID, useValue: PLATFORM_SERVER_ID },
                        { provide: SSRStylesHost, useClass: SSRStylesHost, deps: [DOCUMENT, APP_ID] },
                    ]
                    : [{ provide: SSRStylesHost, useClass: SSRStylesHost, deps: [DOCUMENT] }]),
                { provide: SharedStylesHost, useExisting: SSRStylesHost },
                { provide: DomSharedStylesHost, useClass: SSRStylesHost },
            ],
        };
    }
}
RendererModule.decorators = [
    { type: NgModule, args: [{
                exports: [BrowserModule],
                imports: [],
                providers: [],
            },] }
];
RendererModule.ctorParameters = () => [
    { type: ApplicationRef },
    { type: TransferState, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [APP_ID,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9jb21tb24vY2xvdmVyL3NyYy9tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsSUFBSSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RGLE9BQU8sRUFDTCxNQUFNLEVBQ04sY0FBYyxFQUNkLE1BQU0sRUFFTixRQUFRLEVBQ1IsUUFBUSxFQUNSLFdBQVcsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsYUFBYSxFQUNiLGFBQWEsRUFDYixvQkFBb0IsSUFBSSxtQkFBbUIsRUFDM0MsaUJBQWlCLElBQUksZ0JBQWdCLEVBQ3JDLFdBQVcsSUFBSSxVQUFVLEdBQzFCLE1BQU0sMkJBQTJCLENBQUM7QUFDbkMsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWdCOUMsTUFBTSxPQUFPLGNBQWM7SUFDekIsWUFDVSxjQUE4QixFQUNsQixhQUE2QixFQUNiLEtBQWM7UUFGMUMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQ2xCLGtCQUFhLEdBQWIsYUFBYSxDQUFnQjtRQUNiLFVBQUssR0FBTCxLQUFLLENBQVM7UUFFbEQsSUFBSSxPQUFPLFlBQVksS0FBSyxXQUFXLElBQUksWUFBWSxFQUFFO1lBQ3ZELFlBQVksR0FBRztnQkFDYixrQkFBa0IsRUFBRSxHQUFHLEVBQUUsQ0FDdkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztnQkFDMUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2dCQUNqQixhQUFhLEVBQUUsR0FBRyxFQUFFLENBQ2xCLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUTtxQkFDekIsSUFBSSxDQUNILE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQzlCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxLQUFLLENBQUMsU0FBUyxDQUFDLENBQ2pCO3FCQUNBLFNBQVMsRUFBRTthQUNqQixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU87UUFDWixPQUFPO1lBQ0wsUUFBUSxFQUFFLGNBQWM7WUFDeEIsU0FBUyxFQUFFO2dCQUNULEdBQUcsQ0FBQyxPQUFPLFlBQVksS0FBSyxXQUFXLElBQUksWUFBWTtvQkFDckQsQ0FBQyxDQUFDO3dCQUNFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUU7d0JBQ3RELEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtxQkFDOUU7b0JBQ0gsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUM1RSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFO2dCQUN6RCxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFO2FBQzFEO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQTFDRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDO2dCQUN4QixPQUFPLEVBQUUsRUFBRTtnQkFDWCxTQUFTLEVBQUUsRUFBRTthQUNkOzs7WUE5QkMsY0FBYztZQVNkLGFBQWEsdUJBeUJWLFFBQVE7eUNBQ1IsUUFBUSxZQUFJLE1BQU0sU0FBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IERPQ1VNRU5ULCDJtVBMQVRGT1JNX1NFUlZFUl9JRCBhcyBQTEFURk9STV9TRVJWRVJfSUQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgQVBQX0lELFxuICBBcHBsaWNhdGlvblJlZixcbiAgSW5qZWN0LFxuICBNb2R1bGVXaXRoUHJvdmlkZXJzLFxuICBOZ01vZHVsZSxcbiAgT3B0aW9uYWwsXG4gIFBMQVRGT1JNX0lELFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEJyb3dzZXJNb2R1bGUsXG4gIFRyYW5zZmVyU3RhdGUsXG4gIMm1RG9tU2hhcmVkU3R5bGVzSG9zdCBhcyBEb21TaGFyZWRTdHlsZXNIb3N0LFxuICDJtVNoYXJlZFN0eWxlc0hvc3QgYXMgU2hhcmVkU3R5bGVzSG9zdCxcbiAgybVlc2NhcGVIdG1sIGFzIGVzY2FwZUh0bWwsXG59IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXBUbywgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFNTUlN0eWxlc0hvc3QgfSBmcm9tICcuL3N0eWxlc19ob3N0JztcblxuZXhwb3J0IGludGVyZmFjZSBOR1JlbmRlck1vZGVBUEkge1xuICBnZXRTZXJpYWxpemVkU3RhdGU6ICgpID0+IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgZ2V0V2hlblN0YWJsZTogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgYXBwSWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIE5HUmVuZGVyTW9kZSA9IGJvb2xlYW4gfCB1bmRlZmluZWQgfCBOR1JlbmRlck1vZGVBUEk7XG5kZWNsYXJlIGxldCBuZ1JlbmRlck1vZGU6IE5HUmVuZGVyTW9kZTtcblxuQE5nTW9kdWxlKHtcbiAgZXhwb3J0czogW0Jyb3dzZXJNb2R1bGVdLFxuICBpbXBvcnRzOiBbXSxcbiAgcHJvdmlkZXJzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgUmVuZGVyZXJNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFwcGxpY2F0aW9uUmVmOiBBcHBsaWNhdGlvblJlZixcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIHRyYW5zZmVyU3RhdGU/OiBUcmFuc2ZlclN0YXRlLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoQVBQX0lEKSBwcml2YXRlIGFwcElkPzogc3RyaW5nLFxuICApIHtcbiAgICBpZiAodHlwZW9mIG5nUmVuZGVyTW9kZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbmdSZW5kZXJNb2RlKSB7XG4gICAgICBuZ1JlbmRlck1vZGUgPSB7XG4gICAgICAgIGdldFNlcmlhbGl6ZWRTdGF0ZTogKCkgPT5cbiAgICAgICAgICB0aGlzLnRyYW5zZmVyU3RhdGUgPyBlc2NhcGVIdG1sKHRoaXMudHJhbnNmZXJTdGF0ZS50b0pzb24oKSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGFwcElkOiB0aGlzLmFwcElkLFxuICAgICAgICBnZXRXaGVuU3RhYmxlOiAoKSA9PlxuICAgICAgICAgIHRoaXMuYXBwbGljYXRpb25SZWYuaXNTdGFibGVcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICBmaWx0ZXIoKGlzU3RhYmxlKSA9PiBpc1N0YWJsZSksXG4gICAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICAgIG1hcFRvKHVuZGVmaW5lZCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAudG9Qcm9taXNlKCksXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8UmVuZGVyZXJNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFJlbmRlcmVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIC4uLih0eXBlb2YgbmdSZW5kZXJNb2RlICE9PSAndW5kZWZpbmVkJyAmJiBuZ1JlbmRlck1vZGVcbiAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgeyBwcm92aWRlOiBQTEFURk9STV9JRCwgdXNlVmFsdWU6IFBMQVRGT1JNX1NFUlZFUl9JRCB9LFxuICAgICAgICAgICAgICB7IHByb3ZpZGU6IFNTUlN0eWxlc0hvc3QsIHVzZUNsYXNzOiBTU1JTdHlsZXNIb3N0LCBkZXBzOiBbRE9DVU1FTlQsIEFQUF9JRF0gfSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICA6IFt7IHByb3ZpZGU6IFNTUlN0eWxlc0hvc3QsIHVzZUNsYXNzOiBTU1JTdHlsZXNIb3N0LCBkZXBzOiBbRE9DVU1FTlRdIH1dKSxcbiAgICAgICAgeyBwcm92aWRlOiBTaGFyZWRTdHlsZXNIb3N0LCB1c2VFeGlzdGluZzogU1NSU3R5bGVzSG9zdCB9LFxuICAgICAgICB7IHByb3ZpZGU6IERvbVNoYXJlZFN0eWxlc0hvc3QsIHVzZUNsYXNzOiBTU1JTdHlsZXNIb3N0IH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==