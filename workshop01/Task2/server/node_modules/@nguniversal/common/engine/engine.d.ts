
import { NgModuleFactory } from '@angular/core';
import { StaticProvider } from '@angular/core';
import { Type } from '@angular/core';

/**
 * A common rendering engine utility. This abstracts the logic
 * for handling the platformServer compiler, the module cache, and
 * the document loader
 */
export declare class CommonEngine {
    private moduleOrFactory?;
    private providers;
    private readonly factoryCacheMap;
    private readonly templateCache;
    private readonly inlineCriticalCssProcessor;
    private readonly pageExists;
    constructor(moduleOrFactory?: Type<{}> | NgModuleFactory<{}> | undefined, providers?: StaticProvider[]);
    /**
     * Render an HTML document for a specific URL with specified
     * render options
     */
    render(opts: RenderOptions): Promise<string>;
    /** Return the factory for a given engine instance */
    private getFactory;
    /** Retrieve the document from the cache or the filesystem */
    private getDocument;
    /** Return an instance of the platformServer compiler */
    private getCompiler;
}


declare interface InlineCriticalCssProcessOptions {
    outputPath?: string;
}

declare interface InlineCriticalCssProcessorOptions {
    minify?: boolean;
    deployUrl?: string;
}

declare interface InlineCriticalCssResult {
    content: string;
    warnings?: string[];
    errors?: string[];
}

/** These are the allowed options for the render */
export declare interface RenderOptions {
    bootstrap: Type<{}> | NgModuleFactory<{}>;
    providers?: StaticProvider[];
    url?: string;
    document?: string;
    documentFilePath?: string;
    /**
     * Reduce render blocking requests by inlining critical CSS.
     * Defaults to false.
     */
    inlineCriticalCss?: boolean;
    /**
     * Base path location of index file.
     * Defaults to the 'documentFilePath' dirname when not provided.
     */
    publicPath?: string;
}

export declare class ÉµInlineCriticalCssProcessor {
    protected readonly options: InlineCriticalCssProcessorOptions;
    private readonly resourceCache;
    constructor(options: InlineCriticalCssProcessorOptions);
    process(html: string, options: InlineCriticalCssProcessOptions): Promise<InlineCriticalCssResult>;
}

export { }
