{"version":3,"file":"common.js","sources":["../../../../../../modules/common/src/transfer_http.ts","../../../../../../modules/common/src/state-transfer-initializer/module.ts","../../../../../../modules/common/private_api.ts","../../../../../../modules/common/public_api.ts","../../../../../../modules/common/index.ts","../../../../../../modules/common/common.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  HTTP_INTERCEPTORS,\n  HttpEvent,\n  HttpHandler,\n  HttpHeaders,\n  HttpInterceptor,\n  HttpParams,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { ApplicationRef, Injectable, NgModule } from '@angular/core';\nimport {\n  BrowserTransferStateModule,\n  StateKey,\n  TransferState,\n  makeStateKey,\n} from '@angular/platform-browser';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\n\nexport interface TransferHttpResponse {\n  body?: any | null;\n  headers?: Record<string, string[]>;\n  status?: number;\n  statusText?: string;\n  url?: string;\n}\n\nfunction getHeadersMap(headers: HttpHeaders): Record<string, string[]> {\n  const headersMap: Record<string, string[]> = {};\n  for (const key of headers.keys()) {\n    const values = headers.getAll(key);\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n\n  return headersMap;\n}\n\n@Injectable()\nexport class TransferHttpCacheInterceptor implements HttpInterceptor {\n  private isCacheActive = true;\n\n  private invalidateCacheEntry(url: string) {\n    Object.keys(this.transferState['store']).forEach((key) =>\n      key.includes(url) ? this.transferState.remove(makeStateKey(key)) : null,\n    );\n  }\n\n  private makeCacheKey(method: string, url: string, params: HttpParams): StateKey<string> {\n    // make the params encoded same as a url so it's easy to identify\n    const encodedParams = params\n      .keys()\n      .sort()\n      .map((k) => `${k}=${params.getAll(k)}`)\n      .join('&');\n    const key = (method === 'GET' ? 'G.' : 'H.') + url + '?' + encodedParams;\n\n    return makeStateKey<TransferHttpResponse>(key);\n  }\n\n  constructor(appRef: ApplicationRef, private transferState: TransferState) {\n    // Stop using the cache if the application has stabilized, indicating initial rendering is\n    // complete.\n    // tslint:disable-next-line: no-floating-promises\n    appRef.isStable\n      .pipe(\n        filter((isStable: boolean) => isStable),\n        take(1),\n      )\n      .toPromise()\n      .then(() => {\n        this.isCacheActive = false;\n      });\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Stop using the cache if there is a mutating call.\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      this.isCacheActive = false;\n      this.invalidateCacheEntry(req.url);\n    }\n\n    if (!this.isCacheActive) {\n      // Cache is no longer active. Pass the request through.\n      return next.handle(req);\n    }\n\n    const storeKey = this.makeCacheKey(req.method, req.url, req.params);\n\n    if (this.transferState.hasKey(storeKey)) {\n      // Request found in cache. Respond using it.\n      const response = this.transferState.get<TransferHttpResponse>(storeKey, {});\n\n      return observableOf(\n        new HttpResponse<any>({\n          body: response.body,\n          headers: new HttpHeaders(response.headers),\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n        }),\n      );\n    } else {\n      // Request not found in cache. Make the request and cache it.\n      const httpEvent = next.handle(req);\n\n      return httpEvent.pipe(\n        tap((event: HttpEvent<unknown>) => {\n          if (event instanceof HttpResponse) {\n            this.transferState.set<TransferHttpResponse>(storeKey, {\n              body: event.body,\n              headers: getHeadersMap(event.headers),\n              status: event.status,\n              statusText: event.statusText,\n              url: event.url || '',\n            });\n          }\n        }),\n      );\n    }\n  }\n}\n\n/**\n * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP\n * calls from the server to the client application.\n */\n@NgModule({\n  imports: [BrowserTransferStateModule],\n  providers: [\n    TransferHttpCacheInterceptor,\n    { provide: HTTP_INTERCEPTORS, useExisting: TransferHttpCacheInterceptor, multi: true },\n  ],\n})\nexport class TransferHttpCacheModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { DOCUMENT } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\n\nexport function domContentLoadedFactory(doc: Document): () => Promise<void> {\n  return () =>\n    new Promise((resolve, _reject) => {\n      if (doc.readyState === 'complete' || doc.readyState === 'interactive') {\n        resolve();\n\n        return;\n      }\n\n      const contentLoaded = () => {\n        doc.removeEventListener('DOMContentLoaded', contentLoaded);\n        resolve();\n      };\n\n      doc.addEventListener('DOMContentLoaded', contentLoaded);\n    });\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: domContentLoadedFactory,\n      deps: [DOCUMENT],\n    },\n  ],\n})\nexport class StateTransferInitializerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { TransferHttpCacheInterceptor as ɵTransferHttpCacheInterceptor } from './src/transfer_http';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { TransferHttpCacheModule } from './src/transfer_http';\nexport { StateTransferInitializerModule } from './src/state-transfer-initializer/module';\nexport * from './private_api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {domContentLoadedFactory as ɵnguniversal_modules_common_common_a} from './src/state-transfer-initializer/module';"],"names":["observableOf"],"mappings":";;;;;;;AAAA;;;;;;;AAmCA,SAAS,aAAa,CAAC,OAAoB;IACzC,MAAM,UAAU,GAA6B,EAAE,CAAC;IAChD,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,EAAE;QAChC,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,MAAM,KAAK,IAAI,EAAE;YACnB,UAAU,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;SAC1B;KACF;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;MAGY,4BAA4B;IAqBvC,YAAY,MAAsB,EAAU,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QApBhE,kBAAa,GAAG,IAAI,CAAC;;;;QAwB3B,MAAM,CAAC,QAAQ;aACZ,IAAI,CACH,MAAM,CAAC,CAAC,QAAiB,KAAK,QAAQ,CAAC,EACvC,IAAI,CAAC,CAAC,CAAC,CACR;aACA,SAAS,EAAE;aACX,IAAI,CAAC;YACJ,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC5B,CAAC,CAAC;KACN;IA/BO,oBAAoB,CAAC,GAAW;QACtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KACnD,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CACxE,CAAC;KACH;IAEO,YAAY,CAAC,MAAc,EAAE,GAAW,EAAE,MAAkB;;QAElE,MAAM,aAAa,GAAG,MAAM;aACzB,IAAI,EAAE;aACN,IAAI,EAAE;aACN,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;aACtC,IAAI,CAAC,GAAG,CAAC,CAAC;QACb,MAAM,GAAG,GAAG,CAAC,MAAM,KAAK,KAAK,GAAG,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,aAAa,CAAC;QAEzE,OAAO,YAAY,CAAuB,GAAG,CAAC,CAAC;KAChD;IAiBD,SAAS,CAAC,GAAqB,EAAE,IAAiB;;QAEhD,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,EAAE;YACjD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACpC;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;;YAEvB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;QAEpE,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;;YAEvC,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAuB,QAAQ,EAAE,EAAE,CAAC,CAAC;YAE5E,OAAOA,EAAY,CACjB,IAAI,YAAY,CAAM;gBACpB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,OAAO,EAAE,IAAI,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC1C,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,UAAU,EAAE,QAAQ,CAAC,UAAU;gBAC/B,GAAG,EAAE,QAAQ,CAAC,GAAG;aAClB,CAAC,CACH,CAAC;SACH;aAAM;;YAEL,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEnC,OAAO,SAAS,CAAC,IAAI,CACnB,GAAG,CAAC,CAAC,KAAyB;gBAC5B,IAAI,KAAK,YAAY,YAAY,EAAE;oBACjC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAuB,QAAQ,EAAE;wBACrD,IAAI,EAAE,KAAK,CAAC,IAAI;wBAChB,OAAO,EAAE,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC;wBACrC,MAAM,EAAE,KAAK,CAAC,MAAM;wBACpB,UAAU,EAAE,KAAK,CAAC,UAAU;wBAC5B,GAAG,EAAE,KAAK,CAAC,GAAG,IAAI,EAAE;qBACrB,CAAC,CAAC;iBACJ;aACF,CAAC,CACH,CAAC;SACH;KACF;;;YAlFF,UAAU;;;YA9BF,cAAc;YAIrB,aAAa;;AA+Gf;;;;MAWa,uBAAuB;;;YAPnC,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,0BAA0B,CAAC;gBACrC,SAAS,EAAE;oBACT,4BAA4B;oBAC5B,EAAE,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,4BAA4B,EAAE,KAAK,EAAE,IAAI,EAAE;iBACvF;aACF;;;AC9ID;;;;;;;SAWgB,uBAAuB,CAAC,GAAa;IACnD,OAAO,MACL,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO;QAC3B,IAAI,GAAG,CAAC,UAAU,KAAK,UAAU,IAAI,GAAG,CAAC,UAAU,KAAK,aAAa,EAAE;YACrE,OAAO,EAAE,CAAC;YAEV,OAAO;SACR;QAED,MAAM,aAAa,GAAG;YACpB,GAAG,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC;YAC3D,OAAO,EAAE,CAAC;SACX,CAAC;QAEF,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC;KACzD,CAAC,CAAC;AACP,CAAC;MAYY,8BAA8B;;;YAV1C,QAAQ,SAAC;gBACR,SAAS,EAAE;oBACT;wBACE,OAAO,EAAE,eAAe;wBACxB,KAAK,EAAE,IAAI;wBACX,UAAU,EAAE,uBAAuB;wBACnC,IAAI,EAAE,CAAC,QAAQ,CAAC;qBACjB;iBACF;aACF;;;ACtCD;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;"}