import { CommonEngine } from '@nguniversal/common/engine';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';
/**
 * This is an express engine for handling Angular Applications
 */
export function ngExpressEngine(setupOptions) {
    const engine = new CommonEngine(setupOptions.bootstrap, setupOptions.providers);
    return function (filePath, options, callback) {
        var _a, _b, _c, _d;
        try {
            const renderOptions = Object.assign({}, options);
            if (!setupOptions.bootstrap && !renderOptions.bootstrap) {
                throw new Error('You must pass in a NgModule or NgModuleFactory to be bootstrapped');
            }
            const req = renderOptions.req;
            const res = renderOptions.res || req.res;
            renderOptions.url =
                renderOptions.url || `${req.protocol}://${req.get('host') || ''}${req.originalUrl}`;
            renderOptions.documentFilePath = renderOptions.documentFilePath || filePath;
            renderOptions.providers = [...(renderOptions.providers || []), getReqResProviders(req, res)];
            (renderOptions.publicPath =
                (_b = (_a = renderOptions.publicPath) !== null && _a !== void 0 ? _a : setupOptions.publicPath) !== null && _b !== void 0 ? _b : (_c = options.settings) === null || _c === void 0 ? void 0 : _c.views),
                (renderOptions.inlineCriticalCss =
                    (_d = renderOptions.inlineCriticalCss) !== null && _d !== void 0 ? _d : setupOptions.inlineCriticalCss);
            engine
                .render(renderOptions)
                .then((html) => callback(null, html))
                .catch(callback);
        }
        catch (err) {
            callback(err);
        }
    };
}
/**
 * Get providers of the request and response
 */
function getReqResProviders(req, res) {
    const providers = [
        {
            provide: REQUEST,
            useValue: req,
        },
    ];
    if (res) {
        providers.push({
            provide: RESPONSE,
            useValue: res,
        });
    }
    return providers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvZXhwcmVzcy1lbmdpbmUvc3JjL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUEsT0FBTyxFQUFFLFlBQVksRUFBd0MsTUFBTSw0QkFBNEIsQ0FBQztBQUNoRyxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBa0J2RTs7R0FFRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsWUFBc0M7SUFDcEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFaEYsT0FBTyxVQUNMLFFBQWdCLEVBQ2hCLE9BQWUsRUFDZixRQUFxRDs7UUFFckQsSUFBSTtZQUNGLE1BQU0sYUFBYSxHQUFHLGtCQUFLLE9BQU8sQ0FBbUIsQ0FBQztZQUN0RCxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUU7Z0JBQ3ZELE1BQU0sSUFBSSxLQUFLLENBQUMsbUVBQW1FLENBQUMsQ0FBQzthQUN0RjtZQUVELE1BQU0sR0FBRyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUM7WUFDOUIsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDO1lBRXpDLGFBQWEsQ0FBQyxHQUFHO2dCQUNmLGFBQWEsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN0RixhQUFhLENBQUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixJQUFJLFFBQVEsQ0FBQztZQUM1RSxhQUFhLENBQUMsU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLEVBQUUsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDN0YsQ0FBQyxhQUFhLENBQUMsVUFBVTtnQkFDdkIsTUFBQSxNQUFBLGFBQWEsQ0FBQyxVQUFVLG1DQUFJLFlBQVksQ0FBQyxVQUFVLG1DQUFJLE1BQUMsT0FBZSxDQUFDLFFBQVEsMENBQUUsS0FBSyxDQUFDO2dCQUN4RixDQUFDLGFBQWEsQ0FBQyxpQkFBaUI7b0JBQzlCLE1BQUEsYUFBYSxDQUFDLGlCQUFpQixtQ0FBSSxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUV2RSxNQUFNO2lCQUNILE1BQU0sQ0FBQyxhQUFhLENBQUM7aUJBQ3JCLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDcEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3BCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDZjtJQUNILENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQVMsa0JBQWtCLENBQUMsR0FBWSxFQUFFLEdBQWM7SUFDdEQsTUFBTSxTQUFTLEdBQXFCO1FBQ2xDO1lBQ0UsT0FBTyxFQUFFLE9BQU87WUFDaEIsUUFBUSxFQUFFLEdBQUc7U0FDZDtLQUNGLENBQUM7SUFDRixJQUFJLEdBQUcsRUFBRTtRQUNQLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDYixPQUFPLEVBQUUsUUFBUTtZQUNqQixRQUFRLEVBQUUsR0FBRztTQUNkLENBQUMsQ0FBQztLQUNKO0lBRUQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcblxuaW1wb3J0IHsgU3RhdGljUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbkVuZ2luZSwgUmVuZGVyT3B0aW9ucyBhcyBDb21tb25SZW5kZXJPcHRpb25zIH0gZnJvbSAnQG5ndW5pdmVyc2FsL2NvbW1vbi9lbmdpbmUnO1xuaW1wb3J0IHsgUkVRVUVTVCwgUkVTUE9OU0UgfSBmcm9tICdAbmd1bml2ZXJzYWwvZXhwcmVzcy1lbmdpbmUvdG9rZW5zJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIGFsbG93ZWQgb3B0aW9ucyBmb3IgdGhlIGVuZ2luZVxuICovXG5leHBvcnQgdHlwZSBOZ1NldHVwT3B0aW9ucyA9IFBpY2s8XG4gIENvbW1vblJlbmRlck9wdGlvbnMsXG4gICdib290c3RyYXAnIHwgJ3Byb3ZpZGVycycgfCAncHVibGljUGF0aCcgfCAnaW5saW5lQ3JpdGljYWxDc3MnXG4+O1xuXG4vKipcbiAqIFRoZXNlIGFyZSB0aGUgYWxsb3dlZCBvcHRpb25zIGZvciB0aGUgcmVuZGVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyT3B0aW9ucyBleHRlbmRzIENvbW1vblJlbmRlck9wdGlvbnMge1xuICByZXE6IFJlcXVlc3Q7XG4gIHJlcz86IFJlc3BvbnNlO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYW4gZXhwcmVzcyBlbmdpbmUgZm9yIGhhbmRsaW5nIEFuZ3VsYXIgQXBwbGljYXRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZ0V4cHJlc3NFbmdpbmUoc2V0dXBPcHRpb25zOiBSZWFkb25seTxOZ1NldHVwT3B0aW9ucz4pIHtcbiAgY29uc3QgZW5naW5lID0gbmV3IENvbW1vbkVuZ2luZShzZXR1cE9wdGlvbnMuYm9vdHN0cmFwLCBzZXR1cE9wdGlvbnMucHJvdmlkZXJzKTtcblxuICByZXR1cm4gZnVuY3Rpb24gKFxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXG4gICAgb3B0aW9uczogb2JqZWN0LFxuICAgIGNhbGxiYWNrOiAoZXJyPzogRXJyb3IgfCBudWxsLCBodG1sPzogc3RyaW5nKSA9PiB2b2lkLFxuICApIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVuZGVyT3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9IGFzIFJlbmRlck9wdGlvbnM7XG4gICAgICBpZiAoIXNldHVwT3B0aW9ucy5ib290c3RyYXAgJiYgIXJlbmRlck9wdGlvbnMuYm9vdHN0cmFwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgcGFzcyBpbiBhIE5nTW9kdWxlIG9yIE5nTW9kdWxlRmFjdG9yeSB0byBiZSBib290c3RyYXBwZWQnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVxID0gcmVuZGVyT3B0aW9ucy5yZXE7XG4gICAgICBjb25zdCByZXMgPSByZW5kZXJPcHRpb25zLnJlcyB8fCByZXEucmVzO1xuXG4gICAgICByZW5kZXJPcHRpb25zLnVybCA9XG4gICAgICAgIHJlbmRlck9wdGlvbnMudXJsIHx8IGAke3JlcS5wcm90b2NvbH06Ly8ke3JlcS5nZXQoJ2hvc3QnKSB8fCAnJ30ke3JlcS5vcmlnaW5hbFVybH1gO1xuICAgICAgcmVuZGVyT3B0aW9ucy5kb2N1bWVudEZpbGVQYXRoID0gcmVuZGVyT3B0aW9ucy5kb2N1bWVudEZpbGVQYXRoIHx8IGZpbGVQYXRoO1xuICAgICAgcmVuZGVyT3B0aW9ucy5wcm92aWRlcnMgPSBbLi4uKHJlbmRlck9wdGlvbnMucHJvdmlkZXJzIHx8IFtdKSwgZ2V0UmVxUmVzUHJvdmlkZXJzKHJlcSwgcmVzKV07XG4gICAgICAocmVuZGVyT3B0aW9ucy5wdWJsaWNQYXRoID1cbiAgICAgICAgcmVuZGVyT3B0aW9ucy5wdWJsaWNQYXRoID8/IHNldHVwT3B0aW9ucy5wdWJsaWNQYXRoID8/IChvcHRpb25zIGFzIGFueSkuc2V0dGluZ3M/LnZpZXdzKSxcbiAgICAgICAgKHJlbmRlck9wdGlvbnMuaW5saW5lQ3JpdGljYWxDc3MgPVxuICAgICAgICAgIHJlbmRlck9wdGlvbnMuaW5saW5lQ3JpdGljYWxDc3MgPz8gc2V0dXBPcHRpb25zLmlubGluZUNyaXRpY2FsQ3NzKTtcblxuICAgICAgZW5naW5lXG4gICAgICAgIC5yZW5kZXIocmVuZGVyT3B0aW9ucylcbiAgICAgICAgLnRoZW4oKGh0bWwpID0+IGNhbGxiYWNrKG51bGwsIGh0bWwpKVxuICAgICAgICAuY2F0Y2goY2FsbGJhY2spO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogR2V0IHByb3ZpZGVycyBvZiB0aGUgcmVxdWVzdCBhbmQgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gZ2V0UmVxUmVzUHJvdmlkZXJzKHJlcTogUmVxdWVzdCwgcmVzPzogUmVzcG9uc2UpOiBTdGF0aWNQcm92aWRlcltdIHtcbiAgY29uc3QgcHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdID0gW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IFJFUVVFU1QsXG4gICAgICB1c2VWYWx1ZTogcmVxLFxuICAgIH0sXG4gIF07XG4gIGlmIChyZXMpIHtcbiAgICBwcm92aWRlcnMucHVzaCh7XG4gICAgICBwcm92aWRlOiBSRVNQT05TRSxcbiAgICAgIHVzZVZhbHVlOiByZXMsXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcHJvdmlkZXJzO1xufVxuIl19